<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Incline Plane Simulation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        canvas {
            border: 1px solid black;
            background-color: #fff;
        }
        .controls {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>Incline Plane Simulation</h1>
    <canvas id="simulationCanvas" width="800" height="400"></canvas>
    <div class="controls">
        <label for="angle">Incline Angle (degrees): </label>
        <input type="range" id="angle" min="0" max="45" value="10">
        <span id="angleValue">10</span>Â°
        <button onclick="startSimulation()">Start</button>
    </div>
    <script>
        const canvas = document.getElementById('simulationCanvas');
        const ctx = canvas.getContext('2d');
        const angleInput = document.getElementById('angle');
        const angleValue = document.getElementById('angleValue');
        let cart, photogate1, photogate2, startTime, midTime, endTime;

        angleInput.addEventListener('input', () => {
            angleValue.textContent = angleInput.value;
            drawIncline();
        });

        function drawIncline() {
            const angle = angleInput.value * Math.PI / 180;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.save();
            ctx.translate(100, 300);
            ctx.rotate(-angle);
            ctx.fillStyle = '#ccc';
            ctx.fillRect(0, 0, 600, 10);
            ctx.restore();
        }

        function startSimulation() {
            const angle = angleInput.value * Math.PI / 180;
            const acceleration = 9.8 * Math.sin(angle);
            cart = { x: 100, y: 290, velocity: 0 };
            photogate1 = { x: 400, triggered: false };
            photogate2 = { x: 700, triggered: false };
            startTime = performance.now();
            midTime = null;
            endTime = null;
            requestAnimationFrame(update);
        }

        function update(timestamp) {
            const deltaTime = (timestamp - startTime) / 1000;
            cart.velocity += 9.8 * Math.sin(angleInput.value * Math.PI / 180) * deltaTime;
            cart.x += cart.velocity * deltaTime * 100;
            drawIncline();
            drawCart();
            checkPhotogates(timestamp);
            if (cart.x < 800) {
                requestAnimationFrame(update);
            }
        }

        function drawCart() {
            ctx.fillStyle = 'blue';
            ctx.fillRect(cart.x, cart.y, 20, 10);
        }

        function checkPhotogates(timestamp) {
            if (!photogate1.triggered && cart.x >= photogate1.x) {
                photogate1.triggered = true;
                midTime = timestamp;
                console.log('Midpoint velocity:', cart.velocity.toFixed(2), 'm/s');
            }
            if (!photogate2.triggered && cart.x >= photogate2.x) {
                photogate2.triggered = true;
                endTime = timestamp;
                console.log('End velocity:', cart.velocity.toFixed(2), 'm/s');
            }
        }

        drawIncline();
    </script>
</body>
</html>
